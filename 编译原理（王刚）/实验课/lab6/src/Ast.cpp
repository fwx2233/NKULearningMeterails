#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"

extern FILE *yyout;
int Node::counter = 0;
IRBuilder *Node::builder = nullptr;
SymbolEntry *_0se = new ConstantSymbolEntry(TypeSystem::intType, 0);
ExprNode *exp0 = new Constant(_0se);
SymbolEntry *_1se = new ConstantSymbolEntry(TypeSystem::intType, 1);
ExprNode *exp1 = new Constant(_1se);
SymbolEntry *truese = new BoolSymbolEntry(TypeSystem::boolType, 1);
ExprNode *exptrue = new Constant(truese);
Node::Node()
{
    seq = counter++;
}

Id::Id(SymbolEntry *se) : ExprNode(se)
{
    //cout<<se->toStr()<<endl;

    SymbolEntry *temp = new TemporarySymbolEntry(se->getType(), SymbolTable::getLabel());
    dst = new Operand(temp);
}

void Node::backPatch(std::vector<Instruction *> &list, BasicBlock *bb)
{
    for (auto &inst : list)
    {
        inst->getParent()->addSucc(bb);
        bb->addPred(inst->getParent());
        if (inst->isCond())
            dynamic_cast<CondBrInstruction *>(inst)->setTrueBranch(bb);
        else if (inst->isUncond())
            dynamic_cast<UncondBrInstruction *>(inst)->setBranch(bb);
    }
}

void Node::backPatchFalse(std::vector<Instruction *> &list, BasicBlock *bb)
{
    for (auto &inst : list)
    {
        inst->getParent()->addSucc(bb);
        bb->addPred(inst->getParent());
        if (inst->isCond() && dynamic_cast<CondBrInstruction *>(inst)->getFalseBranch() == nullptr)
            dynamic_cast<CondBrInstruction *>(inst)->setFalseBranch(bb);
        else if (inst->isUncond())
            dynamic_cast<UncondBrInstruction *>(inst)->setBranch(bb);
    }
}

std::vector<Instruction *> Node::merge(std::vector<Instruction *> &list1, std::vector<Instruction *> &list2)
{
    std::vector<Instruction *> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    //fprintf(stdout,"\ngencode start\n");
    root->genCode();
}

void FunctionDef::genCode()
{
    this->functiondecl->genCode();

    if (stmt)
        stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    **/

    // lookup all basicblock to chekc construct control flow
    //std::vector<BasicBlock *>::iterator it;
    /*for(it = func->begin();it!=func->end();it++) {
       // for each instruction in basic block
       Instruction* ptr = (*it)->begin();
       while (ptr!=(*it)->end())
       {
           if(ptr->isCond()){
               // set true and false branch
               BasicBlock* true_bb = ((CondBrInstruction*)ptr)->getTrueBranch();
               BasicBlock* false_bb = ((CondBrInstruction*)ptr)->getFalseBranch();

               (*it)->addSucc(true_bb);
               (*it)->addSucc(false_bb);

               true_bb->addPred(*it);
               false_bb->addPred(*it);
           }
           else {
               if(ptr->isUncond()) {
                   BasicBlock* next_bb = ((UncondBrInstruction*)ptr)->getBranch();

                   (*it)->addSucc(next_bb);
                   next_bb->addPred(*it);
               }
               else{
                   if(ptr->isReturn()) {
                       Instruction* nextPtr=ptr->getNext();
                       while(nextPtr!=(*it)->end()){
                           (*it)->remove(nextPtr);
                           nextPtr = nextPtr->getNext();
                       }
                   }
               }
           }

           ptr = ptr->getNext();
       }
       
   }
   */
}

void BinaryExpr::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func); // if the result of lhs is true, jump to the trueBB.
        if (!expr1->IsCond())
        {
            SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            expr1 = new BinaryExpr(se, BinaryExpr::NOTEQUAL, expr1, exp0);
        }
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);
        if (!expr2->IsCond())
        {
            SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            expr2 = new BinaryExpr(se, BinaryExpr::NOTEQUAL, expr2, exp0);
        } // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        bb = builder->getInsertBB();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if (op == OR)
    {
        BasicBlock *falseBB = new BasicBlock(func); // if the result of lhs is true, jump to the trueBB.
        if (!expr1->IsCond())
        {
            SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            expr1 = new BinaryExpr(se, BinaryExpr::NOTEQUAL, expr1, exp0);
        }
        expr1->genCode();
        backPatchFalse(expr1->falseList(), falseBB);
        builder->setInsertBB(falseBB); // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        if (!expr2->IsCond())
        {
            SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
            expr2 = new BinaryExpr(se, BinaryExpr::NOTEQUAL, expr2, exp0);
        }
        expr2->genCode();
        bb = builder->getInsertBB();
        false_list = expr2->falseList();
        true_list = merge(expr1->trueList(), expr2->trueList());
    }
    else if (op >= LESS && op <= LESSEQ)
    {
        // Todo
        expr1->setnotfir();
        expr2->setnotfir();
        expr1->genCode();
        expr2->genCode();

        true_list = merge(expr1->trueList(), expr2->trueList());
        false_list=merge(expr1->falseList(),expr2->falseList());
        int opcode;
        switch (op)
        {
        case LESS:
            opcode = CmpInstruction::L;
            break;
        case GREATER:
            opcode = CmpInstruction::G;
            break;
        case EQUAL:
            opcode = CmpInstruction::E;
            break;
        case NOTEQUAL:
            opcode = CmpInstruction::NE;
            break;
        case GREATEREQ:
            opcode = CmpInstruction::GE;
            break;
        case LESSEQ:
            opcode = CmpInstruction::LE;
            break;
        }
        if(expr1->getSymPtr()->getType()!=expr2->getSymPtr()->getType())
        {
            Operand* src;
            ExprNode* tempexpr;
            if(expr1->getSymPtr()->getType()==TypeSystem::boolType)
            {
                src=expr1->getOperand();
                tempexpr=expr1;
            }
            else
            {
                src=expr2->getOperand();
                tempexpr=expr2;
            }
            SymbolEntry* tempse=new TemporarySymbolEntry(TypeSystem::intType,SymbolTable::getLabel());
            Operand* dst1=new Operand(tempse);
            new ZextInstruction(dst1,src,TypeSystem::intType,bb);
            //dst=dst1;
            tempexpr->setOperand(dst1);
        }
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        new CmpInstruction(opcode, dst, src1, src2, bb);
        if(IsFir())
        {
            Instruction *inst = new CondBrInstruction(0, 0, dst, bb);
            true_list.push_back(inst);
            false_list.push_back(inst);
        }
            
    }
    else if (op >= MUL && op <= SUB)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case MUL:
            opcode = BinaryInstruction::MUL;
            break;
        case DIV:
            opcode = BinaryInstruction::DIV;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

void Constant::genCode()
{
    //printf("Constant->gencode()\n");
    // we don't need to generate code.
}

void Id::genCode()
{
    //printf("Id->gencode()\n");
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry *>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void IfStmt::genCode()
{
    //printf("IfStmt->gencode()\n");
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    if (!cond->IsCond())
    {
        SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        cond = new BinaryExpr(se, BinaryExpr::NOTEQUAL, cond, exp0);
    }
    cond->genCode();

    backPatch(cond->trueList(), then_bb);
    backPatchFalse(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    //printf("IfElseStmt->gencode()\n");
    // Todo
    Function *func;
    BasicBlock *then_bb, *else_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    else_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    if (!cond->IsCond())
    {
        SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        cond = new BinaryExpr(se, BinaryExpr::NOTEQUAL, cond, exp0);
    }
    cond->genCode();

    backPatch(cond->trueList(), then_bb);
    backPatchFalse(cond->falseList(), else_bb);

    builder->setInsertBB(then_bb);
    if (this->thenStmt)
        thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(else_bb);
    if (this->elseStmt)
        this->elseStmt->genCode();
    else_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, else_bb);

    builder->setInsertBB(end_bb);
}

void CompoundStmt::genCode()
{
    // Todo
    //printf("CompoundStmt->gencode()\n");
    if (this->stmt)
        this->stmt->genCode();
}

void SeqNode::genCode()
{
    //printf("SeqNode->gencode()\n");
    if (this->stmt1)
        this->stmt1->genCode();
    if (this->stmt2)
        this->stmt2->genCode();
}

void ConstDeclStmt::genCode()
{
    //printf("ConstDeclStmt->gencode();\n");
    if (this->defs)
        this->defs->genCode();
}

void VarDeclStmt::genCode()
{
    //printf("VarDeclStmt->gencode();\n");
    if (this->defs)
        this->defs->genCode();
}

void Defs::genCode()
{
    //printf("Defs->gencode()\n");
    if (this->def)
        this->def->genCode();
    if (this->defs)
        this->defs->genCode();
}

void Def::genCode()
{
    //printf("Def->gencode()\n");

    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    if (se->isGlobal())
    {
        Operand *addr;
        SymbolEntry *addr_se;
        addr_se = new IdentifierSymbolEntry(*se);
        addr_se->setType(new PointerType(se->getType()));
        addr = new Operand(addr_se);
        se->setAddr(addr);
        if (expr)
        {
            expr->genCode();
            BasicBlock *bb = builder->getUnit()->getGlobalBB();
            new MovInstruction(dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr())->getAddr(), expr->getOperand(), bb, 1);
        }
        else{
             BasicBlock *bb = builder->getUnit()->getGlobalBB();
            new MovInstruction(dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr())->getAddr(), exp0->getOperand(), bb, 1);
        }
    }
    else if (se->isLocal())
    {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Instruction *alloca;
        Operand *addr;
        SymbolEntry *addr_se;
        Type *type;
        type = new PointerType(se->getType());
        addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
        addr = new Operand(addr_se);
        alloca = new AllocaInstruction(addr, se); // allocate space for local id in function stack.
        entry->insertFront(alloca);               // allocate instructions should be inserted into the begin of the entry block.
        se->setAddr(addr);
        if (expr != nullptr)
        {
            expr->genCode();
            BasicBlock *bb;
            bb = builder->getInsertBB();
            new StoreInstruction(se->getAddr(), expr->getOperand(), bb);
        } // set the addr operand in symbol entry so that we can use it in subsequent code generation.
    }
}

void ReturnStmt::genCode()
{
    // Todo
    //printf("ReturnStmt->gencode()\n");
    BasicBlock *bb = builder->getInsertBB();
    Operand *src;
    if (this->retValue)
    {
        retValue->genCode();
        src = retValue->getOperand();
    }
    else
    {
        src = nullptr;
    }
    BasicBlock* BB=new BasicBlock(builder->getInsertBB()->getParent());
    new RetInstruction(src, bb);
    builder->setInsertBB(BB);

}

void AssignStmt::genCode()
{
    //printf("AssignStmt->gencode()\n");
    BasicBlock *bb = builder->getInsertBB();
    if (this->expr)
        this->expr->genCode();
    if (1)
    {
        Operand *addr = dynamic_cast<IdentifierSymbolEntry *>(lval->getSymPtr())->getAddr();
        Operand *src=expr->getOperand();
        
            
        /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
        new StoreInstruction(addr, src, bb);
    }
    else
    {
        Operand *dst = lval->getOperand();
        Operand *src = expr->getOperand();
        new MovInstruction(dst, src, bb);
    }
}

void IStreamFunction::genCode()
{
}

void OStreamFunction::genCode()
{
}

void funcCallPara::genCode()
{
    //printf("funcCallPara->gencode()\n");
    if (this->expr)
        this->expr->genCode();
}

void funcCallParas::genCode()
{
    //printf("funcCallParas->gencode()\n");

    if (this->param)
        this->param->genCode();
    if (this->params)
        this->params->genCode();
}

void funcCall::genCode()
{
    //printf("funcCall->gencode()\n");
    BasicBlock *bb = builder->getInsertBB();
    if(getSymPtr()->IsSysFunc()&&!dynamic_cast<IdentifierSymbolEntry*>(getSymPtr())->IsDeclared())
    {
        new DeclareInstruction(getSymPtr(),builder->getUnit()->getGlobalBB());
        dynamic_cast<IdentifierSymbolEntry*>(getSymPtr())->setDeclared();
    }
    if (this->params)
        this->params->genCode();

    std::vector<Operand *> *paras = new std::vector<Operand *>;

    // lookup all params
    StmtNode *temp = params;
    while (temp)
    {
        StmtNode *firstParam = dynamic_cast<funcCallParas *>(temp)->getFirstParam();
        paras->push_back(dynamic_cast<funcCallPara *>(firstParam)->getParam()->getOperand());
        temp = dynamic_cast<funcCallParas *>(temp)->getNextParam();
    }
    new FuncCallInstruction(dst, id->getOperand(), paras, bb);

}

void funcCallStmt::genCode()
{
    //printf("funcCallStmt->gencode()\n");
    funccall->genCode();
}

void funcParam::genCode()
{
    //printf("funcParam->gencode()\n");
    // this->id->genCode();
    // same as def->gencode()

    IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *entry = func->getEntry();
    Instruction *alloca;
    Operand *addr;
    SymbolEntry *addr_se;
    Type *type;
    type = new PointerType(se->getType());
    addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
    addr = new Operand(addr_se);
    alloca = new AllocaInstruction(addr, se); // allocate space for local id in function stack.
    entry->insertFront(alloca);               // allocate instructions should be inserted into the begin of the entry block.
    se->setAddr(addr);
    BasicBlock *bb;
    bb = builder->getInsertBB();
    new StoreInstruction(se->getAddr(), id->getOperand(), bb);
}

void funcParams::genCode()
{
    //printf("funcParams->gencode()\n");
    if (this->param)
        this->param->genCode();
    if (this->params)
        this->params->genCode();
}

void FunctionDecl::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, id->getSymPtr());
    
    // lookup all params
    std::vector<Operand *> *param = new std::vector<Operand *>;
    StmtNode *temp = dynamic_cast<funcParams *>(parameters);

    while (temp)
    {
        StmtNode *firstParamStmt = dynamic_cast<funcParams *>(temp)->getFirstParam();
        param->push_back(dynamic_cast<funcParam *>(firstParamStmt)->getId()->getOperand());
        temp = dynamic_cast<funcParams *>(temp)->getNextParam();
        /*param->push_back(dynamic_cast<IdentifierSymbolEntry *>(dynamic_cast<funcParam*>(temp->getFirstParam())->getId()->getSymPtr())->getAddr());
        temp=dynamic_cast<funcParams*>(temp->getNextParam());*/
    }

    // will add in unit
    
    func->setParamsOperand(param);
    // set entry, and let poiter point to this function
    BasicBlock *entry = func->getEntry();
    builder->setInsertBB(entry);
    if (this->parameters)
        parameters->genCode();
}

void WhileStmt::genCode()
{
    //printf("WhileStmt->gencode()\n");
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    BasicBlock *cond_bb, *then_bb, *end_bb;

    cond_bb = new BasicBlock(func);
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);
    new UncondBrInstruction(cond_bb, bb);
    builder->setInsertBB(cond_bb);
    if (!cond->IsCond())
    {
        SymbolEntry *se = new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel());
        cond = new BinaryExpr(se, BinaryExpr::NOTEQUAL, cond, exp0);
    }
    cond->genCode();

    backPatch(cond->trueList(), then_bb);
    backPatchFalse(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    if (this->dostmt)
        this->dostmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(cond_bb, then_bb);
    builder->setInsertBB(end_bb);
}

void ExprStmt::genCode()
{
    if (this->expr)
        this->expr->genCode();
}

void UnaryExpr::genCode()
{
    //printf("UnaryExpr->gencode()\n");
    BasicBlock *bb = builder->getInsertBB();

    expr->genCode();
    Operand *src = expr->getOperand();
    int opcode;
    if (op == ADD)
    {
        opcode = UnaryInstruction::ADD;
        new UnaryInstruction(opcode, dst, src, bb);
    }
    if (op == SUB)
    {
        opcode = UnaryInstruction::SUB;
        new UnaryInstruction(opcode, dst, src, bb);
    }
    if (op == NOT)
    {
        opcode = UnaryInstruction::NOT;
        new UnaryInstruction(opcode, dst, src, bb);
        Operand* dst1=new Operand(new TemporarySymbolEntry(TypeSystem::boolType,SymbolTable::getLabel()));
        new BinaryInstruction(BinaryInstruction::XOR,dst1,dst,exptrue->getOperand(),bb);
        Operand* dst2=new Operand(new TemporarySymbolEntry(TypeSystem::intType,SymbolTable::getLabel()));
        new ZextInstruction(dst2,dst1,TypeSystem::intType,bb);
        dst=dst2;
    }
    if(op==FUNC)
    {     
        dst=dynamic_cast<funcCall*>(expr)->getOperand();
    }
}

//----------------------------------------------typeCheck
void Ast::typeCheck()
{
    int level = 0;
    //printf("typeCheck start.\nAst root\n");
    if (root != nullptr)
        root->typeCheck(level);
}

void FunctionDef::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function Define\n");
    SymbolEntry *funcse = dynamic_cast<FunctionDecl *>(functiondecl)->getid()->getSymPtr();
    // Todo
    functiondecl->setisinfunc(funcse);
    dynamic_cast<FunctionDecl *>(this->functiondecl)->typeCheck(level + 4);
    // check return;
    Type *tempFunc = dynamic_cast<FunctionDecl *>(this->functiondecl)->getSe()->getType();
    int returnFlag = dynamic_cast<FunctionType *>(tempFunc)->isReturn();
    bool isret = dynamic_cast<FunctionType *>(tempFunc)->IsRet();
    Type *functionReturnType = dynamic_cast<FunctionType *>(tempFunc)->getRetType();
    if (functionReturnType == TypeSystem::intType && returnFlag == 0)
    {
        if (dynamic_cast<IdentifierSymbolEntry *>(funcse)->getName() == "main"&& isret == 0)
        {
            SeqNode *tempstmt = new SeqNode(this->stmt, new ReturnStmt(exp0));
            this->stmt = tempstmt;
        }
        else
        {
            fprintf(stderr, "ERROR:int Function must have a return stmt.\n");
            check = 0;
        }
    }
    if (functionReturnType == TypeSystem::voidType && isret == 0)
    {
        //fprintf(stderr, "test\n");
        SeqNode *tempstmt = new SeqNode(this->stmt, new ReturnStmt);
        this->stmt = tempstmt;
    }

    // check other;

    this->stmt->setisinfunc(funcse);
    this->stmt->typeCheck(level + 4);
}

void BinaryExpr::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Binary Exprtion, operatrion is %d\n", this->op);
    // expr1 and expr2

    if (!this->expr1 || !this->expr2)
    {
        // 如果两个其中有一个是空
        fprintf(stderr, "ERROR:Expration shouuld not be null");
        // exit(EXIT_FAILURE);
        check = 0;
        return;
    }
    // 二元运算表达式
    Type *expr1Type = this->expr1->getSymPtr()->getType();
    Type *expr2Type = this->expr2->getSymPtr()->getType();
    if (expr1Type != expr2Type)
    {
        if ((expr1Type == TypeSystem::boolType && expr2Type == TypeSystem::intType) || (expr1Type == TypeSystem::intType && expr2Type == TypeSystem::boolType))
        {
            return;
        }
        else
        {
            fprintf(stderr, "ERROR:type %s and %s mismatch in line xx\n", expr1Type->toStr().c_str(), expr2Type->toStr().c_str());
            check = 0;
            // exit(EXIT_FAILURE);
            return;
        }
    }
    this->expr1->typeCheck(level + 4);
    this->expr2->typeCheck(level + 4);
    if(expr1->getSymPtr()->getType()==TypeSystem::voidType||expr2->getSymPtr()->getType()==TypeSystem::voidType)
    {
        check=0;
        fprintf(stderr, "ERROR:type %s and %s mismatch in line xx\n", expr1Type->toStr().c_str(), expr2Type->toStr().c_str());
    }
    // 为了让他能先继续检查，两个都设置成inttype
    /*expr1Type = expr2Type = TypeSystem::intType;
    symbolEntry->setType(expr1Type);*/
    return;

    // OK
}

void Constant::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Constant\n");
    // 常数的类型检查，这里只有int类型，所以直接设置成int就行
    this->symbolEntry->setType(TypeSystem::intType);
    return;

    // OK
}

void Id::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "ID\n");
    // 查看变量是否在符号表里
    SymbolEntry *tempID = this->getSymPtr();
    // 对于这个来说，如果查到不是空，那就表示在符号表里是有的;反之没有
    if (!tempID)
    {
        fprintf(stderr, "ERROR:ID: %s id not define in line xx\n", this->symbolEntry->toStr().c_str());
        check = 0;
        // exit(EXIT_FAILURE);
        return;
    }

    // OK
}

void IfStmt::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "If stmt\n");
    checkisinfunc();
    // Todo
    // 检查判断语句，同时判断语句的类型需要被设置为bool类型
    this->cond->typeCheck(level);
    //this->cond->getSymPtr()->setType(TypeSystem::boolType);
    if (getisinfunc())
    {
        thenStmt->setisinfunc(getparent());
    }
    // 检查thenstmt
    this->thenStmt->typeCheck(level + 4);
}

void IfElseStmt::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "If else stmt\n");
    checkisinfunc();
    // Todo
    // 和ifstmt相比，多一个elsestmt的检查
    this->cond->typeCheck(level + 4);
    //this->cond->getSymPtr()->setType(TypeSystem::boolType);
    if (getisinfunc())
    {
        thenStmt->setisinfunc(getparent());
        elseStmt->setisinfunc(getparent());
    }
    this->thenStmt->typeCheck(level + 4);
    this->elseStmt->typeCheck(level + 4);

    // OK
}

void CompoundStmt::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Compound stmt\n");
    checkisinfunc();
    // Todo
    if (this->stmt != nullptr)
    {
        if (getisinfunc())
            stmt->setisinfunc(getparent());
        this->stmt->typeCheck(level + 4);
    }

    // OK
}

void SeqNode::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Seqnode\n");
    // Todo
    // 交个两边的stmt自己去检查
    if (getisinfunc())
    {
        stmt1->setisinfunc(getparent());
        stmt2->setisinfunc(getparent());
    }
    stmt1->typeCheck(level + 4);
    stmt2->typeCheck(level + 4);

    // OK
}

void ReturnStmt::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Return stmt\n");
    // 检查return是否在函数中
    checkisinfunc();

    // 检查return的类型和函数类型是否一样
    Type *retType;
    if (this->retValue == nullptr)
        retType = TypeSystem::voidType;
    else
    {
        // check
        this->retValue->typeCheck(level + 4);
        retType = this->retValue->getSymPtr()->getType();
    }
    if (getisinfunc())
    {
        Type *currentFunctionType = dynamic_cast<FunctionType *>(getparent()->getType())->getRetType();
        if (retType != currentFunctionType)
        {
            fprintf(stderr, "ERROR:Function type: %s and return type: %s mismatch.\n", currentFunctionType->toStr().c_str(), retType->toStr().c_str());
            check = 0;
        }
    }
}

void AssignStmt::typeCheck(int level)
{
    // Todo
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Assign stmt\n");
    checkisinfunc();
    // 检查lval的类型不能是func

    if (lval->getSymPtr()->getType()->isFunc())
    {
        fprintf(stderr, "ERROR:Left value type %s could not be Func tpye in line xx\n", lval->getSymPtr()->getType()->toStr().c_str());
        check = 0;
        return;
    }
    // lval的类型不能是const
    if (dynamic_cast<IdentifierSymbolEntry *>(lval->getSymPtr())->isConst())
    {
        fprintf(stderr, "ERROR:Left value %s could not be CONST\n", lval->getSymPtr()->getType()->toStr().c_str());
        check = 0;
        return;
    }
    // lval和expr的类型需要是一样的
    Type *lavlType = this->lval->getSymPtr()->getType();
    Type *exprType = this->expr->getSymPtr()->getType();
    if (lavlType != exprType)
    {
        fprintf(stderr, "ERROR:Left value type %s and expr type %s mismatch in line xx\n", lval->getSymPtr()->getType()->toStr().c_str(), exprType->toStr().c_str());
        //check = 0;
        return;
    }
    // Lval
    this->lval->typeCheck(level + 4);
    // expr
    this->expr->typeCheck(level + 4);

    // OK
}

void UnaryExpr::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Unary Exprtion\n");
    // 让expr进行检查
    this->expr->typeCheck(level + 4);
    // 将自己的这个设置成对应的类型
    Type *exprTpye = expr->getSymPtr()->getType();
    this->getSymPtr()->setType(exprTpye);

    // OK
}

void ExprStmt::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Exprstmt\n");
    if (expr != 0)
    {
        checkisinfunc();
        this->expr->typeCheck(level + 4);
    }

    // OK
}

void Def::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Def\n");
    // 检查ID
    this->id->typeCheck(level + 4);
    // check if variable or const has been defined in current scope
    // 检查ID和expr的类型是否相符

    Type *IDTpye = this->id->getSymPtr()->getType();
    if (this->expr != nullptr)
    {
        // 第一种是int ID=expr;的类型
        // 检查expr
        Type *ExprTpye = this->expr->getSymPtr()->getType();
        this->expr->typeCheck(level + 4);
        // ID的类型要是int，expr的类型也要是int
        if (IDTpye != ExprTpye)
        {
            fprintf(stderr, "ERROR:ID: %s and Epxr: %s mismatch in line xx\n", IDTpye->toStr().c_str(), ExprTpye->toStr().c_str());
            check = 0;
            // exit(EXIT_FAILURE);
        }
        return;
    }
    else
    {
        // 第二种是int ID;的类型，直接return就好，没什么可以查的
        return;
    }

    // ok
}

void Defs::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Defs\n");
    // 前面的调用def的检查，后面的调用后面的检查（递归）
    this->def->typeCheck(level + 4);
    if (this->defs != nullptr)
        this->defs->typeCheck(level + 4);

    // OK
}

void ConstDeclStmt::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Const Declare stmt\n");
    this->defs->typeCheck(level + 4);

    // OK
}

void VarDeclStmt::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Value Declare\n");
    this->defs->typeCheck(level + 4);
    getisinfunc();
    // OK
}

void WhileStmt::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "While stmt\n");
    checkisinfunc();
    // 检查形式和if相似
    this->cond->typeCheck(level + 4);
    // 判断语句的类型设置为bool
    //this->cond->getSymPtr()->setType(TypeSystem::boolType);
    dostmt->setisincircle();
    if (getisinfunc())
    {
        dostmt->setisinfunc(getparent());
    }
    this->dostmt->typeCheck(level + 4);

    // OK
}

void FunctionDecl::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function Declare\n");
    // 先对id做一个基础的检查
    this->id->typeCheck(level + 4);
    // check scope
    if (!dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr())->isGlobal())
    {
        fprintf(stderr, "ERROR:Function declare must be Global.\n");
        check = 0;
        return;
    }
    // 然后需要检查这id是不是已经在符号表里了
    SymbolEntry *isInSe = identifiers->lookup(dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr())->getName());
    if (!isInSe)
    {
        fprintf(stderr, "ERROR:Function has not been loaded in symbol table, error\n");
        check = 0;
        return;
    }
    // 检查parameters
    if (this->parameters != nullptr)
    {
        parameters->setisinfunc(getparent());
        this->parameters->typeCheck(level + 4);
    }

    // use isInSe to check reload
    /*Type* currentType = this->se->getType();
    Type* symbolTableType = isInSe->getType();
    int numOfCurrentFunc = dynamic_cast<FunctionType*>(currentType)->getNumOfParas();
    while(isInSe!=nullptr){
        int numOfTalbeFunc = dynamic_cast<FunctionType*>(symbolTableType)->getNumOfParas();
        if(numOfCurrentFunc == numOfTalbeFunc){
            // have same size but not the same one
            if(this->se!=isInSe){
                fprintf(stderr, "Wrong function reload.\n");
                return;
            }
        }
        isInSe = isInSe->next;
    }*/
}

void funcParams::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function Parameters\n");
    // 同样的递归结构检查
    this->param->setisinfunc(getparent());
    this->param->typeCheck(level + 4);
    if (this->params != nullptr)
    {
        this->params->setisinfunc(getparent());
        this->params->typeCheck(level + 4);
    }

    // OK
}

void funcParam::typeCheck(int level)
{
    dynamic_cast<FunctionType *>(getparent()->getType())->addParaType(type);
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function param\n");
    // 检查id
    this->id->typeCheck(level + 4);
    // 检查type，必须是int
    if (this->type != TypeSystem::intType)
    {
        fprintf(stderr, "ERROR:Function parameters must be int type.\n");
        check = 0;
        return;
    }
    // 如果expr非空，需要进行检查
    if (this->expr)
    {
        this->expr->typeCheck(level + 4);
        // 检查id和expr的类型是不是一样的
        Type *idType = this->id->getSymPtr()->getType();
        Type *exprType = this->expr->getSymPtr()->getType();
        if (idType != exprType)
        {
            fprintf(stderr, "ERROR:ID type %s and Expr type %s mismatch in line xx\n.", idType->toStr().c_str(), exprType->toStr().c_str());
            check = 0;
            return;
        }
    }

    // Maybe OK
}

void funcCallStmt::typeCheck(int level)
{
    funccall->typeCheck(level);
}

void funcCall::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function call\n");
    // 首先检查这个function在不在符号表里，不在的话就是错的
    if (this->getSymPtr() == nullptr)
    {
        fprintf(stderr, "ERROR:Function must be declared before using.\n");
        check = 0;
        return;
    }
    // 检查参数调用
    int numOfParams = 0;
    // self check and count realy number of function call parameters.
    if (this->params != nullptr)
    {
        this->params->typeCheck(level + 4);
        StmtNode *pointerToParam = params;
        while (dynamic_cast<funcCallParas *>(pointerToParam) != nullptr)
        {
            pointerToParam = dynamic_cast<funcCallParas *>(pointerToParam)->getNextParam();
            numOfParams += 1;
        }
    }
    // check number
    // for each function which has the same function name in symbol entry
    SymbolEntry *tempSe = this->getSymPtr();
    Type *tempType = tempSe->getType();
    // a flag to confirm it is the function which has been declared
    bool flag = false;
    if (numOfParams == dynamic_cast<FunctionType *>(tempType)->getNumOfParas())
    {
        flag = true;
    }
    if (!flag)
    {
        fprintf(stderr, "ERROR:No match function.\n");
        check = 0;
    }

    // set return type
    /*if (this->getSymPtr()->getType() == TypeSystem::voidType)
    {
        this->symbolEntry->setType(TypeSystem::voidType);
    }
    else
    {
        this->symbolEntry->setType(TypeSystem::intType);
    }*/
}

void funcCallParas::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function call parameters\n");
    // like defs and def

    this->param->typeCheck(level + 4);
    if (this->params != nullptr)
    {
        this->params->typeCheck(level + 4);
    }
}

void funcCallPara::typeCheck(int level)
{
    fprintf(stdout, "%*c", level, ' ');
    fprintf(stdout, "Function call param\n");
    // check if id is in symbol entry
    if (expr->getSymPtr() == nullptr)
    {
        fprintf(stderr, "ERROR:You must use parameter after define it.\n");
        check = 0;
        return;
    }
    this->expr->typeCheck(level + 4);
    // set type
    expr->getSymPtr()->setType(this->expr->getSymPtr()->getType());
}

void OStreamFunction::typeCheck(int level)
{
}

void IStreamFunction::typeCheck(int level)
{
}

void StmtNode::checkisinfunc()
{
    if (!getisinfunc())
    {
        fprintf(stderr, "ERROR:stmt must be used in function\n");
        check = 0;
    }
}

bool Def::isConst()
{
    return dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr())->isConst();
}

//-----------------------------output

void Ast::output()
{
    fprintf(yyout, "program\n");
    if (root != nullptr)
        root->output(4);
}

void UnaryExpr::output(int level)
{
    string op_str;
    switch (op)
    {
    case ADD:
        op_str = "plus";
        break;
    case SUB:
        op_str = "minus";
        break;
    case NOT:
        op_str = "not";
        break;
    case FUNC:
        op_str = "func";
        break;
    }
    fprintf(yyout, "%*cUnaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr->output(level + 4);
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch (op)
    {
    case ADD:
        op_str = "add";
        break;
    case SUB:
        op_str = "sub";
        break;
    case AND:
        op_str = "and";
        break;
    case OR:
        op_str = "or";
        break;
    case LESS:
        op_str = "less";
        break;
    case GREATER:
        op_str = "greater";
        break;
    case EQUAL:
        op_str = "equal";
        break;
    case NOTEQUAL:
        op_str = "notequal";
        break;
    case MUL:
        op_str = "mul";
        break;
    case MOD:
        op_str = "mod";
        break;
    case DIV:
        op_str = "div";
        break;
    case GREATEREQ:
        op_str = "greatereq";
        break;
    case LESSEQ:
        op_str = "lesseq";
        break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry *>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

void ExprStmt::output(int level)
{
    fprintf(yyout, "%*cExprStmt\n", level, ' ');
    if (expr != NULL)
    {
        expr->output(level + 4);
    }
}

void CompoundStmt::output(int level)
{

    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    if (stmt == 0)
        return;
    stmt->output(level + 4);
}

void SeqNode::output(int level)
{
    fprintf(yyout, "%*cSequence\n", level, ' ');
    stmt1->output(level + 4);
    stmt2->output(level + 4);
}

void Def::output(int level)
{
    fprintf(yyout, "%*cDefStmt\n", level, ' ');
    id->output(level + 4);
    if (expr != 0)
        expr->output(level + 4);
}

void Defs::output(int level)
{
    def->output(level);
    if (defs != 0)
        defs->output(level);
}

void VarDeclStmt::output(int level)
{
    fprintf(yyout, "%*cVarDeclStmt\n", level, ' ');
    defs->output(level + 4);
}

void ConstDeclStmt::output(int level)
{
    fprintf(yyout, "%*cConstDeclStmt\n", level, ' ');
    defs->output(level + 4);
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    cond->output(level + 4);
    dostmt->output(level + 4);
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FunctionDecl::output(int level)
{
    fprintf(yyout, "%*cFunctionDecl\n", level, ' ');
    id->output(level + 4);
    if (parameters != 0)
        parameters->output(level + 4);
    else
    {
        fprintf(yyout, "%*cvoid parameters\n", level + 4, ' ');
    }
}

void FunctionDef::output(int level)
{
    fprintf(yyout, "%*cFunctionDef\n", level, ' ');
    functiondecl->output(level + 4);
    stmt->output(level + 4);
}

void funcParams::output(int level)
{

    param->output(level);
    if (params != 0)
        params->output(level);
}

void funcParam::output(int level)
{

    fprintf(yyout, "%*cFunctionDeclareParam\n", level, ' ');
    if (type == 0)
    {
        id->output(level + 4);
        if (expr != nullptr)
            expr->output(level + 4);
    }
    else
    {
        if (type->isInt())
        {
            fprintf(yyout, "%*cparatype:%s\n", level, ' ', "int");
        }
    }
}

void funcCall::output(int level)
{
    std::string name, type;
    name = getSymPtr()->toStr();
    type = getSymPtr()->getType()->toStr();
    fprintf(yyout, "%*cFunctionCall  funtion name: %s,  type: %s\n", level, ' ', name.c_str(), type.c_str());
    if (params != nullptr)
        params->output(level + 4);
}

void funcCallStmt::output(int level)
{
    fprintf(yyout, "%*cFuncCallStmt\n", level, ' ');
    funccall->output(level + 4);
}
void funcCallParas::output(int level)
{
    fprintf(yyout, "%*cFunctionCallParams\n", level, ' ');
    param->output(level + 4);
    params->output(level + 4);
}

void funcCallPara::output(int level)
{
    fprintf(yyout, "%*cFunctionCallParam\n", level, ' ');
    if (expr)
        expr->output(level + 4);
}

void OStreamFunction::output(int level)
{
    std::string name;
    switch (type)
    {
    case PUTINT:
        name = "putint";
        break;
    case PUTCH:
        name = "putch";
        break;
    }
    fprintf(yyout, "%*cIOFunctionCall  funtion name: %s,  type: %s\n", level, ' ', name.c_str(), "void");
    if (param != nullptr)
        param->output(level + 4);
}

void IStreamFunction::output(int level)
{
    std::string name, type;
    name = "getint";
    type = "int";
    fprintf(yyout, "%*cIOFunctionCall  funtion name: %s,  type: %s\n", level, ' ', name.c_str(), type.c_str());
    // getint->output(level+4);
}

/*void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    stmt->output(level + 4);
}*/
